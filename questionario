2. Sintaxe Básica de C#: Variáveis, Tipos de Dados e Operadores:**
2.1. Explique a importância das variáveis em C# e forneça um exemplo de declaração.
    # As variaveis armazenam dados, numeros, nomes, textos. 
    É a partir delas que pode-se trabalhar esses dados, executar operacoes, etc...
    Um exemplo de declaracao:
    int numero=1; //Aqui foi criado uma variavel chamada numero, do tipo inteiro e foi atribuido a ela o numero 1 
2.2. Quais são os tipos de dados básicos em C# e como são utilizados?
    Os tipos basicos sao: 
        int(inteiro), 
        char(caracter), 
        float(numero de ponto flutuante), 
        bool(booleana), 
        short
        long
        byte
2.3. Dê exemplos de operadores aritméticos e lógicos em C#.
    Os operadores aritmeticos sao: +, -, * e /
    Os operadores logicos: =, !=, <, >, ||, &&

**3. Estruturas de Controle de Fluxo: Condicionais e Loops em C#:**
3.1. Como as estruturas condicionais são implementadas em C#? Dê um exemplo.
    Estruturas condicionais exemplos:
        bool ceuAzul = True;
        string previsao= "";
        If (ceuAzul) then
            previsao = "Vai fazer Sol!";
        else 
            previsao = "Vai chover!";
        int num1=10, num2=2;
        int resultado;   
        char operacao = '=';
        switch (value)
        {
            case '+':
                resultado = num1 + num2;
                break;
            case '-':
                resultado = num1 - num2;
                break;
            case '/':
                resultado = num1 / num2;
                break;
            case '*':
                resultado = num1 * num2;
                break;
            default:
                resultado=-1;
                break;
        }

3.2. Explique o funcionamento dos loops em C# e forneça um exemplo de uso.
    Os loops em c# sao laços de repeticao que utilizamos quando precisamos executar um determinado bloco de codigo n vezes.
    Utilizamos loops para percorrer um array, 
3.3. Qual é a diferença entre o "for" e o "while" em termos de controle de fluxo?
    A diferença entre For e While é basicamente é a forma de fazer. Mas eles tem a mesma funcionalidade
    O for tenho a criacao da variavel de controle, a condicao e o incremento... ele se torna um while quando eu faco isso: for(;x<=0;)
**4. Strings, Arrays e Listas, Datas:**
4.1. Descreva operações comuns realizadas em strings em C#.
    split quebra string em partes
    replace substitui  
    length retorna quantos caracteres
    concat concatena
4.2. Compare e contraste Arrays e Listas em termos de funcionalidade e uso.
    Sei que tem digerencas. Mas nao me lembro

4.3. Como as datas são representadas e manipuladas em C#? Dê exemplos.
    Utilizamos Datetime.

**5. Language Integrated-Query (LINQ):**
5.1. O que é o LINQ e qual é sua finalidade em C#?
    é uma ferramenta para fazer consultas em diferentes bases de dados que junto com as expressoes lamda fica muito poderosa e pratica a forma de fazer consultas
5.2. Forneça um exemplo prático de utilização do LINQ em uma coleção de dados.
    int[] numeros = { 1, 2, 3, 6, 7, 71, 88, 45, 32, 8, 90, 45 };
    var numerosPares = numeros.Where(num => num % 2 == 0);
5.3. Quais são as vantagens de usar o LINQ em comparação com abordagens convencionais?
    Praticidade e pode utilizar em varios tipos de dados, array, listas, banco de dados

**6. Debugging e Exceções:**
6.1. Descreva o processo de debugging em C# e mencione ferramentas úteis.
6.2. Qual é o papel das exceções em C#? Como são tratadas no código?
6.3. Dê um exemplo de como utilizar a declaração "try-catch" para lidar com exceções.


**7. Conceitos de POO em C#:**
7.1. Explique o que é Programação Orientada a Objetos (POO) e sua importância em C#.
7.2. Quais são os pilares da POO? Descreva cada um brevemente.
7.3. Dê um exemplo prático de como um objeto é criado em C#.


**8. Encapsulamento, Construtores e Destrutores:**
8.1. Por que o encapsulamento é considerado importante na Programação Orientada a Objetos?
8.2. Explique a função dos construtores e destrutores em uma classe C#.
8.3. Como você implementaria um construtor em uma classe?


**9. Herança e Polimorfismo:**
9.1. O que é herança em C# e como ela é aplicada?
9.2. Explique o conceito de polimorfismo e forneça um exemplo prático.
9.3. Quais são as vantagens da herança e do polimorfismo na programação orientada a objetos?


**10. Classes Abstratas e Interfaces:**
10.1. Qual é a diferença entre uma classe abstrata e uma interface em C#?
10.2. Em que cenários você optaria por usar uma classe abstrata em vez de uma interface?
10.3. Dê um exemplo de implementação de uma interface em C#.
